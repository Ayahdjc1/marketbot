# admin_utils.py

from telegram import Update
from telegram.ext import CallbackContext
from report_generator import ReportGenerator
from config import ADMIN_IDS
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
report_generator = ReportGenerator()
logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def admin_help(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã"""
    if not is_admin(update.effective_user.id):
        update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    update.message.reply_text(
        "üîê –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        "/report <–ø–µ—Ä–∏–æ–¥> ‚Äî –æ—Ç—á—ë—Ç (daily/week/month/year)\n"
        "/report_range <–Ω–∞—á–∞–ª–æ> <–∫–æ–Ω–µ—Ü> ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç\n"
        "/admin ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

def _check_admin_access(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    def wrapper(update: Update, context: CallbackContext):
        if not is_admin(update.effective_user.id):
            update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return
        return func(update, context)
    return wrapper

@_check_admin_access
def generate_admin_report(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if not context.args:
        update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: /report daily/week/month/year")
        return

    period = context.args[0].lower()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ ReportGenerator
        path = report_generator.generate_report(period)
        with open(path, "rb") as doc:
            update.message.reply_document(document=doc)
    except ValueError as ve:
        update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {ve}")
        logger.error(f"Validation error: {ve}")
    except Exception as e:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
        logger.critical(f"Report generation failed: {e}", exc_info=True)

@_check_admin_access
def generate_range_report(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"""
    if len(context.args) != 2:
        update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report_range <–Ω–∞—á–∞–ª–æ> <–∫–æ–Ω–µ—Ü>\n–§–æ—Ä–º–∞—Ç: YYYY-MM-DD")
        return

    start_date, end_date = context.args
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ ReportGenerator
        path = report_generator.generate_report_by_date_range(start_date, end_date)
        with open(path, "rb") as doc:
            update.message.reply_document(document=doc)
    except ValueError as ve:
        update.message.reply_text(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã: {ve}")
        logger.warning(f"Date validation failed: {ve}")
    except Exception as e:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
        logger.critical(f"Range report failed: {e}", exc_info=True)
