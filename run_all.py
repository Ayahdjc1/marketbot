# run_all.py

import subprocess
import sys
import os
import time
import signal
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def launch_process(name: str, path: str) -> subprocess.Popen:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫: {name}")
    try:
        return subprocess.Popen(
            [sys.executable, path],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {str(e)}")
        raise

def monitor_process(proc: subprocess.Popen, name: str) -> None:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    while True:
        output = proc.stdout.readline()
        if output == '' and proc.poll() is not None:
            break
        if output:
            logger.info(f"[{name}] {output.strip()}")

if __name__ == "__main__":
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    processes = []

    try:
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        collector_proc = launch_process("–°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö", os.path.join(BASE_DIR, 'collector.py'))
        bot_proc = launch_process("–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç", os.path.join(BASE_DIR, 'bot.py'))

        processes = [collector_proc, bot_proc]

        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞
        import threading
        threading.Thread(target=monitor_process, args=(collector_proc, "COLLECTOR"), daemon=True).start()
        threading.Thread(target=monitor_process, args=(bot_proc, "BOT"), daemon=True).start()

        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã. –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
        while True:
            time.sleep(1)
            for proc in processes:
                if proc.poll() is not None:
                    logger.error(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ!")
                    raise RuntimeError("–û–¥–∏–Ω –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")

    except (KeyboardInterrupt, RuntimeError):
        logger.info("\nüõë –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        for proc in processes:
            if proc.poll() is None:
                try:
                    os.kill(proc.pid, signal.SIGTERM)
                    proc.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
                    os.kill(proc.pid, signal.SIGKILL)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
        
        logger.info("üßπ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    except Exception as e:
        logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)
